name: YOO AGENT CI Pipeline

on:
  push:
    branches: [ "main", "dev" ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: '3.10'
  DOCKER_IMAGE: 'ghcr.io/your-org/yoo-agent'
  POETRY_VERSION: '1.7.0'

jobs:
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev libffi-dev

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        id: cache-poetry
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry & dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --with=dev

      - name: Code formatting (Black)
        run: poetry run black --check src/ tests/

      - name: Linting (Flake8)
        run: poetry run flake8 src/ --max-line-length=120 --ignore=E203,W503

      - name: Static type checking (mypy)
        run: poetry run mypy --strict src/

      - name: Security scan (Bandit)
        run: poetry run bandit -r src/ -c pyproject.toml

      - name: Dependency vulnerability scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          scan-ref: './src'

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: poetry install --no-interaction --with=dev

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ \
            --cov=src \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --junitxml=junit.xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
          flags: unittests

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results-${{ matrix.python-version }}
          path: junit.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction --with=dev

      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379
          POSTGRES_URL: postgresql://test:test@localhost:5432/test
        run: |
          poetry run pytest tests/integration/ \
            --cov=src \
            --cov-append \
            --cov-report=xml:coverage-integration.xml \
            --junitxml=junit-integration.xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: coverage-integration.xml
          flags: integration

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: junit-integration.xml

  build-containers:
    name: Build & Scan Containers
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build multi-arch Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:latest
          push: true

      - name: Scan container vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
          format: 'sarif'
          output: trivy-results.sarif
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy report
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy-results.sarif

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-containers
    steps:
      - uses: actions/checkout@v4

      - name: Start test environment
        run: docker-compose -f config/edge_deployment/docker-compose.yml up -d

      - name: Run load tests
        uses: locustio/locust-action@v1
        with:
          locust-file: tests/performance/load_testing.py
          host: http://localhost:8000
          users: 100
          spawn-rate: 10
          run-time: 5m

      - name: Generate memory profile
        run: |
          docker exec yoo-agent python -m memory_profiler scripts/memory_profiler/edge_runtime.py

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: perf-reports
          path: |
            locust_stats.csv
            memory_profile.log

  notify:
    name: Notify Status
    if: always()
    needs: [performance-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: "CI Pipeline ${{ job.status }}: ${{ github.run_id }}"
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
